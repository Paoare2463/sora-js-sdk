import { Callbacks, ConnectionOptions, DataChannelLabel, JSONType, SignalingOfferMessage, SignalingUpdateMessage, SignalingReOfferMessage } from "./types";
import SoraE2EE from "@sora/e2ee";
export default class ConnectionBase {
    role: string;
    channelId: string;
    metadata: JSONType | undefined;
    signalingUrl: string;
    options: ConnectionOptions;
    constraints: any;
    debug: boolean;
    clientId: string | null;
    connectionId: string | null;
    remoteConnectionIds: string[];
    stream: MediaStream | null;
    authMetadata: JSONType;
    pc: RTCPeerConnection | null;
    encodings: RTCRtpEncodingParameters[];
    dataChannelSignaling: boolean;
    protected ws: WebSocket | null;
    protected callbacks: Callbacks;
    protected e2ee: SoraE2EE | null;
    protected timeoutTimerId: number;
    protected dataChannels: {
        [key in DataChannelLabel]?: RTCDataChannel;
    };
    private ignoreDisconnectWebSocket;
    constructor(signalingUrl: string, role: string, channelId: string, metadata: JSONType, options: ConnectionOptions, debug: boolean);
    on<T extends keyof Callbacks, U extends Callbacks[T]>(kind: T, callback: U): void;
    private closeStream;
    private closeWebSocket;
    private closeDataChannel;
    private closePeerConnection;
    disconnect(): Promise<void>;
    protected setupE2EE(): void;
    protected startE2EE(): void;
    protected signaling(offer: RTCSessionDescriptionInit): Promise<SignalingOfferMessage>;
    protected createOffer(): Promise<RTCSessionDescriptionInit>;
    protected connectPeerConnection(message: SignalingOfferMessage): Promise<void>;
    protected setRemoteDescription(message: SignalingOfferMessage | SignalingUpdateMessage | SignalingReOfferMessage): Promise<void>;
    protected createAnswer(message: SignalingOfferMessage | SignalingUpdateMessage | SignalingReOfferMessage): Promise<void>;
    protected sendAnswer(): void;
    protected onIceCandidate(): Promise<void>;
    protected waitChangeConnectionStateConnected(): Promise<void>;
    protected setConnectionTimeout(): Promise<MediaStream>;
    protected clearConnectionTimeout(): void;
    protected trace(title: string, message: unknown): void;
    private signalingOnMessageE2EE;
    private signalingOnMessageTypeOffer;
    private sendUpdateAnswer;
    private sendReAnswer;
    private signalingOnMessageTypeUpdate;
    private signalingOnMessageTypeReOffer;
    private signalingOnMessageTypePing;
    private signalingOnMessageTypeNotify;
    private setSenderParameters;
    private getStats;
    private onDataChannel;
    private sendMessage;
    private sendE2EEMessage;
    get e2eeSelfFingerprint(): string | undefined;
    get e2eeRemoteFingerprints(): Record<string, string> | undefined;
}
