/**
 * @sora/sdk
 * undefined
 * @version: 2020.5.0-canary.0-dev
 * @author: Shiguredo Inc.
 * @license: Apache-2.0
 **/(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a="undefined"==typeof globalThis?a||self:globalThis,a.Sora=b())})(this,function(){'use strict';function a(){const a=window.navigator.userAgent.toLocaleLowerCase();if(-1!==a.indexOf("edge"))return"edge";return-1!==a.indexOf("chrome")&&-1===a.indexOf("edge")?"chrome":-1!==a.indexOf("safari")&&-1===a.indexOf("chrome")?"safari":-1===a.indexOf("opera")?-1===a.indexOf("firefox")?null:"firefox":"opera"}function b(b,c){if("boolean"!=typeof c&&"VP9"===c.codec_type)return!1;if(("upstream"===b||"sendrecv"===b||"sendonly"===b)&&"firefox"===a())return!1;if("safari"===a()){const a=window.navigator.appVersion.toLowerCase(),d=/version\/([\d.]+)/.exec(a);if(!d)return!1;const e=d.pop();if(!e)return!1;const f=parseFloat(e);if(("upstream"===b||"sendrecv"===b||"sendonly"===b)&&14<=f)return!0;if(("downstream"===b||"recvonly"===b)&&12.1<=f){if(12.1<=f)return!0;if(12==f&&"boolean"!=typeof c&&"H264"===c.codec_type)return!0}return!1}return!0}function c(){return"edge"===a()}function d(){return"safari"===a()}function e(a,c,d,e,f){if("upstream"!==c&&"downstream"!==c&&"sendrecv"!==c&&"sendonly"!==c&&"recvonly"!==c)throw new Error("Unknown role type");if(null===d||void 0===d)throw new Error("channelId can not be null or undefined");const g={type:"connect",sora_client:`Sora JavaScript SDK ${"2020.5.0-canary.0-dev"}`,environment:window.navigator.userAgent,role:c,channel_id:d,sdp:a,audio:!0,video:!0};if(void 0!==e&&(g.metadata=e),"signalingNotifyMetadata"in f&&(g.signaling_notify_metadata=f.signalingNotifyMetadata),"multistream"in f&&!0===f.multistream&&(g.multistream=!0,"spotlight"in f&&(g.spotlight=f.spotlight,"spotlightNumber"in f&&(g.spotlight_number=f.spotlightNumber))),"simulcast"in f||"simulcastRid"in f){"simulcast"in f&&!0===f.simulcast&&(g.simulcast=!0);void 0!==f.simulcastRid&&0<=["r0","r1","r2"].indexOf(f.simulcastRid)&&(g.simulcast_rid=f.simulcastRid)}"clientId"in f&&f.clientId&&(g.client_id=f.clientId);const h=["audioCodecType","audioBitRate"],i=["audioOpusParamsChannels","audioOpusParamsClockRate","audioOpusParamsMaxplaybackrate","audioOpusParamsStereo","audioOpusParamsSpropStereo","audioOpusParamsMinptime","audioOpusParamsPtime","audioOpusParamsUseinbandfec","audioOpusParamsUsedtx"],j=["videoCodecType","videoBitRate"],k=Object.assign({},f);Object.keys(k).forEach(a=>{"audio"===a&&"boolean"==typeof k[a]||"video"===a&&"boolean"==typeof k[a]||0<=h.indexOf(a)&&null!==k[a]||0<=i.indexOf(a)&&null!==k[a]||0<=j.indexOf(a)&&null!==k[a]||delete k[a]}),void 0!==k.audio&&(g.audio=k.audio);const l=Object.keys(k).some(a=>0<=h.indexOf(a));g.audio&&l&&(g.audio={},"audioCodecType"in k&&(g.audio.codec_type=k.audioCodecType),"audioBitRate"in k&&(g.audio.bit_rate=k.audioBitRate));const m=Object.keys(k).some(a=>0<=i.indexOf(a));g.audio&&m&&("object"!=typeof g.audio&&(g.audio={}),g.audio.opus_params={},"audioOpusParamsChannels"in k&&(g.audio.opus_params.channels=k.audioOpusParamsChannels),"audioOpusParamsClockRate"in k&&(g.audio.opus_params.clock_rate=k.audioOpusParamsClockRate),"audioOpusParamsMaxplaybackrate"in k&&(g.audio.opus_params.maxplaybackrate=k.audioOpusParamsMaxplaybackrate),"audioOpusParamsStereo"in k&&(g.audio.opus_params.stereo=k.audioOpusParamsStereo),"audioOpusParamsSpropStereo"in k&&(g.audio.opus_params.sprop_stereo=k.audioOpusParamsSpropStereo),"audioOpusParamsMinptime"in k&&(g.audio.opus_params.minptime=k.audioOpusParamsMinptime),"audioOpusParamsPtime"in k&&(g.audio.opus_params.ptime=k.audioOpusParamsPtime),"audioOpusParamsUseinbandfec"in k&&(g.audio.opus_params.useinbandfec=k.audioOpusParamsUseinbandfec),"audioOpusParamsUsedtx"in k&&(g.audio.opus_params.usedtx=k.audioOpusParamsUsedtx)),void 0!==k.video&&(g.video=k.video);const n=Object.keys(k).some(a=>0<=j.indexOf(a));if(g.video&&n&&(g.video={},"videoCodecType"in k&&(g.video.codec_type=k.videoCodecType),"videoBitRate"in k&&(g.video.bit_rate=k.videoBitRate)),g.simulcast&&!b(g.role,g.video))throw new Error("Simulcast can not be used with this browser");return"e2ee"in f&&(!0===g.video&&(g.video={}),g.video&&(g.video.codec_type="VP8"),g.e2ee=!0),g}function f(a,b,d){let e="";window.performance&&(e="["+(window.performance.now()/1e3).toFixed(3)+"]"),a&&(e=e+"["+a+"]"),c()?console.log(e+" "+b+"\n",d):console.info(e+" "+b+"\n",d)}function g(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var h="undefined"==typeof globalThis?"undefined"==typeof window?"undefined"==typeof global?"undefined"==typeof self?{}:self:global:window:globalThis,i=function(a,b,c){return c={path:b,exports:{},require:function(a,b){return g(a,b===void 0||null===b?c.path:b)}},a(c,c.exports),c.exports}(function(c){(function(d,a){c.exports=a()})(h,function(){return class{constructor(){const b=!!RTCRtpSender.prototype.createEncodedStreams;if(!b)throw new Error("E2EE is not supported in this browser.");this.worker=null,this.onWorkerDisconnect=null}startWorker(){const b=atob("");this.worker=new Worker(URL.createObjectURL(new Blob([b],{type:"application/javascript"}))),this.worker.onmessage=c=>{const{operation:a}=c.data;"disconnect"===a&&"function"==typeof this.onWorkerDisconnect&&this.onWorkerDisconnect()}}clearWorker(){this.worker&&this.worker.postMessage({type:"clear"})}terminateWorker(){this.worker&&this.worker.terminate()}async init(){if(!window.Go)throw new Error(`Failed to load module Go. window.Go is ${window.Go}.`);const d=new Go,{instance:a}=await WebAssembly.instantiateStreaming(fetch("wasm.wasm"),d.importObject);if(d.run(a),!window.e2ee)throw new Error(`Failed to load module e2ee. window.e2ee is ${window.e2ee}.`);const{preKeyBundle:b}=await window.e2ee.init();return b}setupSenderTransform(e){if(e.track){const a=e.createEncodedStreams(),b=a.readableStream||a.readable,c=a.writableStream||a.writable;if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"encrypt",readableStream:b,writableStream:c},[b,c])}}setupReceiverTransform(e){const a=e.createEncodedStreams(),b=a.readableStream||a.readable,c=a.writableStream||a.writable;if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"decrypt",readableStream:b,writableStream:c},[b,c])}postRemoteSecretKeyMaterials(b){if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"remoteSecretKeyMaterials",remoteSecretKeyMaterials:b.remoteSecretKeyMaterials})}postSelfSecretKeyMaterial(e,a,b,c){if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"selfSecretKeyMaterial",selfConnectionId:e,selfKeyId:a,selfSecretKeyMaterial:b,waitingTime:c})}startSession(e,a){const[b,c]=window.e2ee.startSession(e,a.identityKey,a.signedPreKey,a.preKeySignature);if(c)throw c;return b}stopSession(d){const[a,b]=window.e2ee.stopSession(d);if(b)throw b;return a}receiveMessage(d){const[a,b]=window.e2ee.receiveMessage(d);if(b)throw b;return a}start(d){const[a,b]=window.e2ee.start(d);if(b)throw b;return a}addPreKeyBundle(d,a){const b=window.e2ee.addPreKeyBundle(d,a.identityKey,a.signedPreKey,a.preKeySignature);if(b)throw b}selfFingerprint(){return window.e2ee.selfFingerprint()}remoteFingerprints(){return window.e2ee.remoteFingerprints()}static version(){return"2020.5.0-canary.0-dev"}static wasmVersion(){return window.e2ee.version()}}})});class j{constructor(a,b,c,d,e,f){this.role=b,this.channelId=c,this.metadata=d,this.signalingUrl=a,this.options=e,this.options.timeout===void 0&&(this.options.timeout=6e4),this.constraints=null,this.debug=f,this.clientId=null,this.connectionId=null,this.remoteConnectionIds=[],this.stream=null,this.ws=null,this.pc=null,this.callbacks={disconnect:()=>{},push:()=>{},addstream:()=>{},track:()=>{},removestream:()=>{},removetrack:()=>{},notify:()=>{},log:()=>{},timeout:()=>{}},this.authMetadata=null,this.e2ee=null}on(a,b){"addstream"===a?console.warn("@deprecated addstream callback will be removed in a future version. Use track callback."):"removestream"==a&&console.warn("@deprecated removestream callback will be removed in a future version. Use removetrack callback."),a in this.callbacks&&(this.callbacks[a]=b)}disconnect(){this.clientId=null,this.connectionId=null,this.authMetadata=null,this.remoteConnectionIds=[];const a=new Promise(a=>(this.debug&&console.warn("@deprecated closing MediaStream in disconnect will be removed in a future version. Close every track in the MediaStream by yourself."),!this.stream)?a():(this.stream.getTracks().forEach(a=>{a.stop()}),this.stream=null,a())),b=new Promise(a=>this.ws?(1===this.ws.readyState&&this.ws.send(JSON.stringify({type:"disconnect"})),this.ws.close(),this.ws=null,a()):a()),c=new Promise(a=>{if(!this.pc||"closed"===this.pc.connectionState||void 0===this.pc.connectionState)return a();let b=50;const c=setInterval(()=>this.pc?"closed"===this.pc.connectionState?(clearInterval(c),this.pc=null,a()):(--b,0>b)?(clearInterval(c),a()):void 0:(clearInterval(c),a()),100);this.pc.close()});return this.e2ee&&(this.e2ee.terminateWorker(),this.e2ee=null),Promise.all([a,b,c])}startE2EE(){"e2ee"in this.options&&"string"==typeof this.options.e2ee&&(this.e2ee=new i,this.e2ee.onWorkerDisconnect=()=>{this.disconnect()},this.e2ee.startWorker())}signaling(a){return this.trace("CREATE OFFER SDP",a),new Promise((b,c)=>{const d=e(a.sdp||"",this.role,this.channelId,this.metadata,this.options);null===this.ws&&(this.ws=new WebSocket(this.signalingUrl)),this.ws.onclose=a=>{const b=new Error;b.message=`Signaling failed. CloseEventCode:${a.code} CloseEventReason:'${a.reason}'`,c(b)},this.ws.onopen=()=>{this.trace("SIGNALING CONNECT MESSAGE",d),this.ws&&this.ws.send(JSON.stringify(d))},this.ws.onmessage=a=>{const c=JSON.parse(a.data);"offer"==c.type?(this.clientId=c.client_id,this.connectionId=c.connection_id,this.ws&&(this.ws.onclose=a=>{this.callbacks.disconnect(a),this.disconnect()},this.ws.onerror=null),"metadata"in c&&(this.authMetadata=c.metadata),this.trace("SIGNALING OFFER MESSAGE",c),this.trace("OFFER SDP",c.sdp),b(c)):"update"==c.type?(this.trace("UPDATE SDP",c.sdp),this.update(c)):"ping"==c.type?c.stats?this.getStats().then(a=>{this.ws&&this.ws.send(JSON.stringify({type:"pong",stats:a}))}):this.ws&&this.ws.send(JSON.stringify({type:"pong"})):"push"==c.type?this.callbacks.push(c):"notify"==c.type&&this.callbacks.notify(c)}})}async createOffer(){const a=new window.RTCPeerConnection({iceServers:[]});if(d()){a.addTransceiver("video",{direction:"recvonly"}),a.addTransceiver("audio",{direction:"recvonly"});const b=await a.createOffer();return a.close(),b}const b=await a.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return a.close(),b}async connectPeerConnection(a){const b=a.config||{};let c=b;if(this.e2ee&&(c.encodedInsertableStreams=!0),void 0!==window.RTCPeerConnection.generateCertificate){const a=await window.RTCPeerConnection.generateCertificate({name:"ECDSA",namedCurve:"P-256"});c=Object.assign({certificates:[a]},b)}return this.trace("PEER CONNECTION CONFIG",c),this.pc=new window.RTCPeerConnection(c,this.constraints),void(this.pc.oniceconnectionstatechange=()=>{this.pc&&this.trace("ONICECONNECTIONSTATECHANGE ICECONNECTIONSTATE",this.pc.iceConnectionState)})}async setRemoteDescription(a){this.pc&&(await this.pc.setRemoteDescription(new RTCSessionDescription({type:"offer",sdp:a.sdp})))}async createAnswer(a){if(this.pc){if(this.options.simulcast&&("upstream"===this.role||"sendrecv"===this.role||"sendonly"===this.role)&&a.encodings){const b=this.pc.getTransceivers().find(a=>{if(a.mid&&0<=a.mid.indexOf("video")&&null==a.currentDirection)return a});if(!b)throw new Error("Simulcast Error");await this.setSenderParameters(b,a.encodings),await this.setRemoteDescription(a),await this.setSenderParameters(b,a.encodings)}const b=await this.pc.createAnswer();await this.pc.setLocalDescription(b)}}sendAnswer(){this.pc&&this.ws&&this.pc.localDescription&&(this.trace("ANSWER SDP",this.pc.localDescription.sdp),this.ws.send(JSON.stringify({type:"answer",sdp:this.pc.localDescription.sdp})))}sendUpdateAnswer(){this.pc&&this.ws&&this.pc.localDescription&&(this.trace("ANSWER SDP",this.pc.localDescription.sdp),this.ws.send(JSON.stringify({type:"update",sdp:this.pc.localDescription.sdp})))}onIceCandidate(){return new Promise((a,b)=>{const c=setInterval(()=>{if(null===this.pc){clearInterval(c);const a=new Error;a.message="ICECANDIDATE TIMEOUT",b(a)}else this.pc&&"connected"===this.pc.iceConnectionState&&(clearInterval(c),a())},100);this.pc&&(this.pc.onicecandidate=b=>{if(this.pc&&this.trace("ONICECANDIDATE ICEGATHERINGSTATE",this.pc.iceGatheringState),null===b.candidate)clearInterval(c),a();else{const a=b.candidate.toJSON(),c=Object.assign(a,{type:"candidate"});this.trace("ONICECANDIDATE CANDIDATE MESSAGE",c),this.ws&&this.ws.send(JSON.stringify(c))}})})}waitChangeConnectionStateConnected(){return new Promise((a,b)=>{this.pc&&this.pc.connectionState===void 0&&a();const c=setInterval(()=>{if(!this.pc){const a=new Error;a.message="PeerConnection connectionState did not change to 'connected'",clearInterval(c),b(a)}else if(!this.ws||1!==this.ws.readyState){const a=new Error;a.message="PeerConnection connectionState did not change to 'connected'",clearInterval(c),b(a)}else this.pc&&"connected"===this.pc.connectionState&&(clearInterval(c),a())},100)})}setConnectionTimeout(){return new Promise((a,b)=>{this.options.timeout&&0<this.options.timeout&&setTimeout(()=>{if(this.pc&&"connected"!==this.pc.connectionState){const a=new Error;a.message="CONNECTION TIMEOUT",this.callbacks.timeout(),this.disconnect(),b(a)}},this.options.timeout)})}trace(a,b){this.callbacks.log(a,b);this.debug&&f(this.clientId,a,b)}async update(a){await this.setRemoteDescription(a),await this.createAnswer(a),this.sendUpdateAnswer()}setSenderParameters(a,b){const c=a.sender.getParameters();return c.encodings=b,a.sender.setParameters(c)}async getStats(){const a=[];if(!this.pc)return a;const b=await this.pc.getStats();return b.forEach(b=>{a.push(b)}),a}}class k extends j{async connect(a){return this.options.multistream?await Promise.race([this.multiStream(a),this.setConnectionTimeout()]):await Promise.race([this.singleStream(a),this.setConnectionTimeout()])}async singleStream(a){await this.disconnect(),this.startE2EE();const b=await this.createOffer(),c=await this.signaling(b);return await this.connectPeerConnection(c),await this.setRemoteDescription(c),a.getTracks().forEach(b=>{this.pc&&this.pc.addTrack(b,a)}),this.stream=a,await this.createAnswer(c),this.sendAnswer(),this.pc&&this.e2ee&&this.pc.getSenders().forEach(a=>{this.e2ee&&this.e2ee.setupSenderTransform(a)}),await this.onIceCandidate(),await this.waitChangeConnectionStateConnected(),a}async multiStream(a){await this.disconnect(),this.startE2EE();const b=await this.createOffer(),c=await this.signaling(b);return await this.connectPeerConnection(c),this.pc&&(this.pc.ontrack=a=>{const b=a.streams[0];b&&"default"!==b.id&&b.id!==this.connectionId&&(this.e2ee&&this.e2ee.setupReceiverTransform(a.receiver),this.callbacks.track(a),b.onremovetrack=a=>{if(this.callbacks.removetrack(a),a.target){const b=this.remoteConnectionIds.indexOf(a.target.id);-1<b&&(delete this.remoteConnectionIds[b],a.stream=a.target,this.callbacks.removestream(a))}},-1<this.remoteConnectionIds.indexOf(b.id)||(a.stream=b,this.remoteConnectionIds.push(b.id),this.callbacks.addstream(a)))}),await this.setRemoteDescription(c),a.getTracks().forEach(b=>{this.pc&&this.pc.addTrack(b,a)}),this.stream=a,await this.createAnswer(c),this.sendAnswer(),this.pc&&this.e2ee&&this.pc.getSenders().forEach(a=>{this.e2ee&&this.e2ee.setupSenderTransform(a)}),await this.onIceCandidate(),await this.waitChangeConnectionStateConnected(),a}}class l extends j{async connect(){return this.options.multistream?await Promise.race([this.multiStream(),this.setConnectionTimeout()]):await Promise.race([this.singleStream(),this.setConnectionTimeout()])}async singleStream(){await this.disconnect(),this.startE2EE();const a=await this.createOffer(),b=await this.signaling(a);return await this.connectPeerConnection(b),this.pc&&(this.pc.ontrack=a=>{this.stream=a.streams[0];const b=this.stream.id;"default"!==b&&(this.e2ee&&this.e2ee.setupReceiverTransform(a.receiver),this.callbacks.track(a),this.stream.onremovetrack=a=>{if(this.callbacks.removetrack(a),a.target){const b=this.remoteConnectionIds.indexOf(a.target.id);-1<b&&(delete this.remoteConnectionIds[b],a.stream=a.target,this.callbacks.removestream(a))}},-1<this.remoteConnectionIds.indexOf(b)||(a.stream=this.stream,this.remoteConnectionIds.push(b),this.callbacks.addstream(a)))}),await this.setRemoteDescription(b),await this.createAnswer(b),this.sendAnswer(),await this.onIceCandidate(),await this.waitChangeConnectionStateConnected(),this.stream||new MediaStream}async multiStream(){await this.disconnect(),this.startE2EE();const a=await this.createOffer(),b=await this.signaling(a);return await this.connectPeerConnection(b),this.pc&&(this.pc.ontrack=a=>{const b=a.streams[0];"default"!==b.id&&b.id!==this.connectionId&&(this.e2ee&&this.e2ee.setupReceiverTransform(a.receiver),this.callbacks.track(a),b.onremovetrack=a=>{if(this.callbacks.removetrack(a),a.target){const b=this.remoteConnectionIds.indexOf(a.target.id);-1<b&&(delete this.remoteConnectionIds[b],a.stream=a.target,this.callbacks.removestream(a))}},-1<this.remoteConnectionIds.indexOf(b.id)||(a.stream=b,this.remoteConnectionIds.push(b.id),this.callbacks.addstream(a)))}),await this.setRemoteDescription(b),await this.createAnswer(b),this.sendAnswer(),await this.onIceCandidate(),void(await this.waitChangeConnectionStateConnected())}}class m{constructor(a,b=!1){this.signalingUrl=a,this.debug=b}publisher(a,b=null,c={audio:!0,video:!0}){return console.warn("@deprecated publisher will be removed in a future version. Use sendrecv or sendonly."),new k(this.signalingUrl,"upstream",a,b,c,this.debug)}subscriber(a,b=null,c={audio:!0,video:!0}){return console.warn("@deprecated subscriber will be removed in a future version. Use recvonly."),new l(this.signalingUrl,"downstream",a,b,c,this.debug)}sendrecv(a,b=null,c={audio:!0,video:!0}){return new k(this.signalingUrl,"sendrecv",a,b,c,this.debug)}sendonly(a,b=null,c={audio:!0,video:!0}){return new k(this.signalingUrl,"sendonly",a,b,c,this.debug)}recvonly(a,b=null,c={audio:!0,video:!0}){return new l(this.signalingUrl,"recvonly",a,b,c,this.debug)}}return{connection:function(a,b=!1){return new m(a,b)},version:function(){return"2020.5.0-canary.0-dev"}}});
//# sourceMappingURL=sora.min.js.map
