/**
 * @sora/sdk
 * undefined
 * @version: 2020.5.0-canary.0-dev
 * @author: Shiguredo Inc.
 * @license: Apache-2.0
 **/(function(g,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(g="undefined"==typeof globalThis?g||self:globalThis,g.Sora=e())})(this,function(){'use strict';function g(){const g=window.navigator.userAgent.toLocaleLowerCase();if(-1!==g.indexOf("edge"))return"edge";return-1!==g.indexOf("chrome")&&-1===g.indexOf("edge")?"chrome":-1!==g.indexOf("safari")&&-1===g.indexOf("chrome")?"safari":-1===g.indexOf("opera")?-1===g.indexOf("firefox")?null:"firefox":"opera"}function e(e,I){if("boolean"!=typeof I&&"VP9"===I.codec_type)return!1;if(("upstream"===e||"sendrecv"===e||"sendonly"===e)&&"firefox"===g())return!1;if("safari"===g()){const g=window.navigator.appVersion.toLowerCase(),C=/version\/([\d.]+)/.exec(g);if(!C)return!1;const l=C.pop();if(!l)return!1;const d=parseFloat(l);if(("upstream"===e||"sendrecv"===e||"sendonly"===e)&&14<=d)return!0;if(("downstream"===e||"recvonly"===e)&&12.1<=d){if(12.1<=d)return!0;if(12==d&&"boolean"!=typeof I&&"H264"===I.codec_type)return!0}return!1}return!0}function I(){return"edge"===g()}function C(){return"safari"===g()}function l(g,I,C,l,d){if("upstream"!==I&&"downstream"!==I&&"sendrecv"!==I&&"sendonly"!==I&&"recvonly"!==I)throw new Error("Unknown role type");if(null===C||void 0===C)throw new Error("channelId can not be null or undefined");const a={type:"connect",sora_client:`Sora JavaScript SDK ${"2020.5.0-canary.0-dev"}`,environment:window.navigator.userAgent,role:I,channel_id:C,sdp:g,audio:!0,video:!0};if(void 0!==l&&(a.metadata=l),"signalingNotifyMetadata"in d&&(a.signaling_notify_metadata=d.signalingNotifyMetadata),"multistream"in d&&!0===d.multistream&&(a.multistream=!0,"spotlight"in d&&(a.spotlight=d.spotlight,"spotlightNumber"in d&&(a.spotlight_number=d.spotlightNumber))),"simulcast"in d||"simulcastRid"in d){"simulcast"in d&&!0===d.simulcast&&(a.simulcast=!0);void 0!==d.simulcastRid&&0<=["r0","r1","r2"].indexOf(d.simulcastRid)&&(a.simulcast_rid=d.simulcastRid)}"clientId"in d&&d.clientId&&(a.client_id=d.clientId);const i=["audioCodecType","audioBitRate"],n=["audioOpusParamsChannels","audioOpusParamsClockRate","audioOpusParamsMaxplaybackrate","audioOpusParamsStereo","audioOpusParamsSpropStereo","audioOpusParamsMinptime","audioOpusParamsPtime","audioOpusParamsUseinbandfec","audioOpusParamsUsedtx"],A=["videoCodecType","videoBitRate"],c=Object.assign({},d);Object.keys(c).forEach(g=>{"audio"===g&&"boolean"==typeof c[g]||"video"===g&&"boolean"==typeof c[g]||0<=i.indexOf(g)&&null!==c[g]||0<=n.indexOf(g)&&null!==c[g]||0<=A.indexOf(g)&&null!==c[g]||delete c[g]}),void 0!==c.audio&&(a.audio=c.audio);const Z=Object.keys(c).some(g=>0<=i.indexOf(g));a.audio&&Z&&(a.audio={},"audioCodecType"in c&&(a.audio.codec_type=c.audioCodecType),"audioBitRate"in c&&(a.audio.bit_rate=c.audioBitRate));const o=Object.keys(c).some(g=>0<=n.indexOf(g));a.audio&&o&&("object"!=typeof a.audio&&(a.audio={}),a.audio.opus_params={},"audioOpusParamsChannels"in c&&(a.audio.opus_params.channels=c.audioOpusParamsChannels),"audioOpusParamsClockRate"in c&&(a.audio.opus_params.clock_rate=c.audioOpusParamsClockRate),"audioOpusParamsMaxplaybackrate"in c&&(a.audio.opus_params.maxplaybackrate=c.audioOpusParamsMaxplaybackrate),"audioOpusParamsStereo"in c&&(a.audio.opus_params.stereo=c.audioOpusParamsStereo),"audioOpusParamsSpropStereo"in c&&(a.audio.opus_params.sprop_stereo=c.audioOpusParamsSpropStereo),"audioOpusParamsMinptime"in c&&(a.audio.opus_params.minptime=c.audioOpusParamsMinptime),"audioOpusParamsPtime"in c&&(a.audio.opus_params.ptime=c.audioOpusParamsPtime),"audioOpusParamsUseinbandfec"in c&&(a.audio.opus_params.useinbandfec=c.audioOpusParamsUseinbandfec),"audioOpusParamsUsedtx"in c&&(a.audio.opus_params.usedtx=c.audioOpusParamsUsedtx)),void 0!==c.video&&(a.video=c.video);const t=Object.keys(c).some(g=>0<=A.indexOf(g));if(a.video&&t&&(a.video={},"videoCodecType"in c&&(a.video.codec_type=c.videoCodecType),"videoBitRate"in c&&(a.video.bit_rate=c.videoBitRate)),a.simulcast&&!e(a.role,a.video))throw new Error("Simulcast can not be used with this browser");if(!0===d.e2ee){if(void 0===a.signaling_notify_metadata&&(a.signaling_notify_metadata={}),null===a.signaling_notify_metadata||"object"!=typeof a.signaling_notify_metadata)throw new Error("E2EE failed. Options signalingNotifyMetadata must be type 'object'");!0===a.video&&(a.video={}),a.video&&(a.video.codec_type="VP8"),a.e2ee=!0}return a}function d(g,e,C){let l="";window.performance&&(l="["+(window.performance.now()/1e3).toFixed(3)+"]"),g&&(l=l+"["+g+"]"),I()?console.log(l+" "+e+"\n",C):console.info(l+" "+e+"\n",C)}class a{constructor(g){const e=!!RTCRtpSender.prototype.createEncodedStreams;if(!e)throw new Error("E2EE is not supported in this browser.");this.worker=null,this.wasmUrl=g,this.onWorkerDisconnect=null}startWorker(){const g=atob("");this.worker=new Worker(URL.createObjectURL(new Blob([g],{type:"application/javascript"}))),this.worker.onmessage=g=>{const{operation:e}=g.data;"disconnect"===e&&"function"==typeof this.onWorkerDisconnect&&this.onWorkerDisconnect()}}clearWorker(){this.worker&&this.worker.postMessage({type:"clear"})}terminateWorker(){this.worker&&this.worker.terminate()}async init(){if(!window.Go)throw new Error(`Failed to load module Go. window.Go is ${window.Go}.`);const g=new Go,{instance:e}=await WebAssembly.instantiateStreaming(fetch(this.wasmUrl),g.importObject);if(g.run(e),!window.e2ee)throw new Error(`Failed to load module e2ee. window.e2ee is ${window.e2ee}.`);const{preKeyBundle:I}=await window.e2ee.init();return I}setupSenderTransform(g){if(!g.track)return;const e=g.createEncodedStreams(),I=e.readableStream||e.readable,C=e.writableStream||e.writable;if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"encrypt",readableStream:I,writableStream:C},[I,C])}setupReceiverTransform(g){const e=g.createEncodedStreams(),I=e.readableStream||e.readable,C=e.writableStream||e.writable;if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"decrypt",readableStream:I,writableStream:C},[I,C])}postRemoteSecretKeyMaterials(g){if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"remoteSecretKeyMaterials",remoteSecretKeyMaterials:g.remoteSecretKeyMaterials})}postRemoveRemoteDeriveKey(g){if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"removeRemoteDeriveKey",connectionId:g})}postSelfSecretKeyMaterial(g,e,I,C=0){if(!this.worker)throw new Error("Worker is null. Call startWorker in advance.");this.worker.postMessage({type:"selfSecretKeyMaterial",selfConnectionId:g,selfKeyId:e,selfSecretKeyMaterial:I,waitingTime:C})}startSession(g,e){const[I,C]=window.e2ee.startSession(g,e.identityKey,e.signedPreKey,e.preKeySignature);if(C)throw C;return I}stopSession(g){const[e,I]=window.e2ee.stopSession(g);if(I)throw I;return e}receiveMessage(g){const[e,I]=window.e2ee.receiveMessage(g);if(I)throw I;return e}start(g){const[e,I]=window.e2ee.start(g);if(I)throw I;return e}addPreKeyBundle(g,e){const I=window.e2ee.addPreKeyBundle(g,e.identityKey,e.signedPreKey,e.preKeySignature);if(I)throw I}selfFingerprint(){return window.e2ee.selfFingerprint()}remoteFingerprints(){return window.e2ee.remoteFingerprints()}static version(){return"2020.5.0-canary.0"}static wasmVersion(){return window.e2ee.version()}}class i{constructor(g,e,I,C,l,d){this.role=e,this.channelId=I,this.metadata=C,this.signalingUrl=g,this.options=l,this.options.timeout===void 0&&(this.options.timeout=6e4),this.constraints=null,this.debug=d,this.clientId=null,this.connectionId=null,this.remoteConnectionIds=[],this.stream=null,this.ws=null,this.pc=null,this.callbacks={disconnect:()=>{},push:()=>{},addstream:()=>{},track:()=>{},removestream:()=>{},removetrack:()=>{},notify:()=>{},log:()=>{},timeout:()=>{}},this.authMetadata=null,this.e2ee=null}on(g,e){"addstream"===g?console.warn("@deprecated addstream callback will be removed in a future version. Use track callback."):"removestream"==g&&console.warn("@deprecated removestream callback will be removed in a future version. Use removetrack callback."),g in this.callbacks&&(this.callbacks[g]=e)}disconnect(){this.clientId=null,this.connectionId=null,this.authMetadata=null,this.remoteConnectionIds=[];const g=new Promise(g=>(this.debug&&console.warn("@deprecated closing MediaStream in disconnect will be removed in a future version. Close every track in the MediaStream by yourself."),!this.stream)?g():(this.stream.getTracks().forEach(g=>{g.stop()}),this.stream=null,g())),e=new Promise(g=>this.ws?(1===this.ws.readyState&&this.ws.send(JSON.stringify({type:"disconnect"})),this.ws.close(),this.ws=null,g()):g()),I=new Promise(g=>{if(!this.pc||"closed"===this.pc.connectionState||void 0===this.pc.connectionState)return g();let e=50;const I=setInterval(()=>this.pc?"closed"===this.pc.connectionState?(clearInterval(I),this.pc=null,g()):(--e,0>e)?(clearInterval(I),g()):void 0:(clearInterval(I),g()),100);this.pc.close()});return this.e2ee&&(this.e2ee.terminateWorker(),this.e2ee=null),Promise.all([g,e,I])}setupE2EE(){if(!0===this.options.e2ee){if(!this.options.e2eeWasmUrl){const g=new Error;throw g.message=`E2EE failed. Options e2eeWasmUrl is ${this.options.e2eeWasmUrl}`,g}this.e2ee=new a(this.options.e2eeWasmUrl),this.e2ee.onWorkerDisconnect=()=>{this.disconnect()},this.e2ee.startWorker()}}startE2EE(){if(!0===this.options.e2ee&&this.e2ee){if(!this.connectionId){const g=new Error;throw g.message=`E2EE failed. Self connectionId is ${this.connectionId}`,g}this.e2ee.clearWorker();const g=this.e2ee.start(this.connectionId);this.e2ee.postSelfSecretKeyMaterial(this.connectionId,g.selfKeyId,g.selfSecretKeyMaterial)}}signaling(g){return this.trace("CREATE OFFER SDP",g),new Promise(async(e,I)=>{const C=l(g.sdp||"",this.role,this.channelId,this.metadata,this.options);if(C.e2ee&&this.e2ee){const g=await this.e2ee.init();C.signaling_notify_metadata.pre_key_bundle=g}null===this.ws&&(this.ws=new WebSocket(this.signalingUrl)),this.ws.binaryType="arraybuffer",this.ws.onclose=g=>{const e=new Error;e.message=`Signaling failed. CloseEventCode:${g.code} CloseEventReason:'${g.reason}'`,I(e)},this.ws.onopen=()=>{this.trace("SIGNALING CONNECT MESSAGE",C),this.ws&&this.ws.send(JSON.stringify(C))},this.ws.onmessage=g=>{if(g.data instanceof ArrayBuffer&&this.e2ee){const e=new Uint8Array(g.data),I=this.e2ee.receiveMessage(e);return this.e2ee.postRemoteSecretKeyMaterials(I),void I.messages.forEach(g=>{this.ws&&this.ws.send(g.buffer)})}const I=JSON.parse(g.data);if("offer"==I.type)this.clientId=I.client_id,this.connectionId=I.connection_id,this.ws&&(this.ws.onclose=g=>{this.callbacks.disconnect(g),this.disconnect()},this.ws.onerror=null),"metadata"in I&&(this.authMetadata=I.metadata),this.trace("SIGNALING OFFER MESSAGE",I),this.trace("OFFER SDP",I.sdp),e(I);else if("update"==I.type)this.trace("UPDATE SDP",I.sdp),this.update(I);else if("ping"==I.type)I.stats?this.getStats().then(g=>{this.ws&&this.ws.send(JSON.stringify({type:"pong",stats:g}))}):this.ws&&this.ws.send(JSON.stringify({type:"pong"}));else if("push"==I.type)this.callbacks.push(I);else if("notify"==I.type)if(this.callbacks.notify(I),"connection.created"===I.event_type){const g=I.metadata,e=I.connection_id;if(this.connectionId!==e&&g&&g.pre_key_bundle){const I=g.pre_key_bundle;if(this.e2ee){const g=this.e2ee.startSession(e,I);this.e2ee.postRemoteSecretKeyMaterials(g),g.messages.forEach(g=>{this.ws&&this.ws.send(g.buffer)}),this.e2ee.postSelfSecretKeyMaterial(g.selfConnectionId,g.selfKeyId,g.selfSecretKeyMaterial)}}const C=I.metadata_list;C&&C.forEach(g=>{const e=g.metadata.pre_key_bundle,I=g.connection_id;this.e2ee&&this.e2ee.addPreKeyBundle(I,e)})}else if("connection.destroyed"===I.event_type){const g=I.metadata;if(g&&g.pre_key_bundle&&this.e2ee){const g=I.connection_id,e=this.e2ee.stopSession(g);this.e2ee.postSelfSecretKeyMaterial(e.selfConnectionId,e.selfKeyId,e.selfSecretKeyMaterial,5e3),e.messages.forEach(g=>{this.ws&&this.ws.send(g.buffer)}),this.e2ee.postRemoveRemoteDeriveKey(g)}}}})}async createOffer(){const g=new window.RTCPeerConnection({iceServers:[]});if(C()){g.addTransceiver("video",{direction:"recvonly"}),g.addTransceiver("audio",{direction:"recvonly"});const e=await g.createOffer();return g.close(),e}const e=await g.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0});return g.close(),e}async connectPeerConnection(g){const e=g.config||{};let I=e;if(this.e2ee&&(I.encodedInsertableStreams=!0),void 0!==window.RTCPeerConnection.generateCertificate){const g=await window.RTCPeerConnection.generateCertificate({name:"ECDSA",namedCurve:"P-256"});I=Object.assign({certificates:[g]},e)}return this.trace("PEER CONNECTION CONFIG",I),this.pc=new window.RTCPeerConnection(I,this.constraints),void(this.pc.oniceconnectionstatechange=()=>{this.pc&&this.trace("ONICECONNECTIONSTATECHANGE ICECONNECTIONSTATE",this.pc.iceConnectionState)})}async setRemoteDescription(g){this.pc&&(await this.pc.setRemoteDescription(new RTCSessionDescription({type:"offer",sdp:g.sdp})))}async createAnswer(g){if(this.pc){if(this.options.simulcast&&("upstream"===this.role||"sendrecv"===this.role||"sendonly"===this.role)&&g.encodings){const e=this.pc.getTransceivers().find(g=>{if(g.mid&&0<=g.mid.indexOf("video")&&null==g.currentDirection)return g});if(!e)throw new Error("Simulcast Error");await this.setSenderParameters(e,g.encodings),await this.setRemoteDescription(g),await this.setSenderParameters(e,g.encodings)}const e=await this.pc.createAnswer();await this.pc.setLocalDescription(e)}}sendAnswer(){this.pc&&this.ws&&this.pc.localDescription&&(this.trace("ANSWER SDP",this.pc.localDescription.sdp),this.ws.send(JSON.stringify({type:"answer",sdp:this.pc.localDescription.sdp})))}sendUpdateAnswer(){this.pc&&this.ws&&this.pc.localDescription&&(this.trace("ANSWER SDP",this.pc.localDescription.sdp),this.ws.send(JSON.stringify({type:"update",sdp:this.pc.localDescription.sdp})))}onIceCandidate(){return new Promise((g,e)=>{const I=setInterval(()=>{if(null===this.pc){clearInterval(I);const g=new Error;g.message="ICECANDIDATE TIMEOUT",e(g)}else this.pc&&"connected"===this.pc.iceConnectionState&&(clearInterval(I),g())},100);this.pc&&(this.pc.onicecandidate=e=>{if(this.pc&&this.trace("ONICECANDIDATE ICEGATHERINGSTATE",this.pc.iceGatheringState),null===e.candidate)clearInterval(I),g();else{const g=e.candidate.toJSON(),I=Object.assign(g,{type:"candidate"});this.trace("ONICECANDIDATE CANDIDATE MESSAGE",I),this.ws&&this.ws.send(JSON.stringify(I))}})})}waitChangeConnectionStateConnected(){return new Promise((g,e)=>{this.pc&&this.pc.connectionState===void 0&&g();const I=setInterval(()=>{if(!this.pc){const g=new Error;g.message="PeerConnection connectionState did not change to 'connected'",clearInterval(I),e(g)}else if(!this.ws||1!==this.ws.readyState){const g=new Error;g.message="PeerConnection connectionState did not change to 'connected'",clearInterval(I),e(g)}else this.pc&&"connected"===this.pc.connectionState&&(clearInterval(I),g())},100)})}setConnectionTimeout(){return new Promise((g,e)=>{this.options.timeout&&0<this.options.timeout&&setTimeout(()=>{if(this.pc&&"connected"!==this.pc.connectionState){const g=new Error;g.message="CONNECTION TIMEOUT",this.callbacks.timeout(),this.disconnect(),e(g)}},this.options.timeout)})}trace(g,e){this.callbacks.log(g,e);this.debug&&d(this.clientId,g,e)}async update(g){await this.setRemoteDescription(g),await this.createAnswer(g),this.sendUpdateAnswer()}setSenderParameters(g,e){const I=g.sender.getParameters();return I.encodings=e,g.sender.setParameters(I)}async getStats(){const g=[];if(!this.pc)return g;const e=await this.pc.getStats();return e.forEach(e=>{g.push(e)}),g}}class n extends i{async connect(g){return this.options.multistream?await Promise.race([this.multiStream(g),this.setConnectionTimeout()]):await Promise.race([this.singleStream(g),this.setConnectionTimeout()])}async singleStream(g){await this.disconnect(),this.setupE2EE();const e=await this.createOffer(),I=await this.signaling(e);return this.startE2EE(),await this.connectPeerConnection(I),await this.setRemoteDescription(I),g.getTracks().forEach(e=>{this.pc&&this.pc.addTrack(e,g)}),this.stream=g,await this.createAnswer(I),this.sendAnswer(),this.pc&&this.e2ee&&this.pc.getSenders().forEach(g=>{this.e2ee&&this.e2ee.setupSenderTransform(g)}),await this.onIceCandidate(),await this.waitChangeConnectionStateConnected(),g}async multiStream(g){await this.disconnect(),this.setupE2EE();const e=await this.createOffer(),I=await this.signaling(e);return this.startE2EE(),await this.connectPeerConnection(I),this.pc&&(this.pc.ontrack=g=>{const e=g.streams[0];e&&"default"!==e.id&&e.id!==this.connectionId&&(this.e2ee&&this.e2ee.setupReceiverTransform(g.receiver),this.callbacks.track(g),e.onremovetrack=g=>{if(this.callbacks.removetrack(g),g.target){const e=this.remoteConnectionIds.indexOf(g.target.id);-1<e&&(delete this.remoteConnectionIds[e],g.stream=g.target,this.callbacks.removestream(g))}},-1<this.remoteConnectionIds.indexOf(e.id)||(g.stream=e,this.remoteConnectionIds.push(e.id),this.callbacks.addstream(g)))}),await this.setRemoteDescription(I),g.getTracks().forEach(e=>{this.pc&&this.pc.addTrack(e,g)}),this.stream=g,await this.createAnswer(I),this.sendAnswer(),this.pc&&this.e2ee&&this.pc.getSenders().forEach(g=>{this.e2ee&&this.e2ee.setupSenderTransform(g)}),await this.onIceCandidate(),await this.waitChangeConnectionStateConnected(),g}}class A extends i{async connect(){return this.options.multistream?await Promise.race([this.multiStream(),this.setConnectionTimeout()]):await Promise.race([this.singleStream(),this.setConnectionTimeout()])}async singleStream(){await this.disconnect(),this.setupE2EE();const g=await this.createOffer(),e=await this.signaling(g);return this.startE2EE(),await this.connectPeerConnection(e),this.pc&&(this.pc.ontrack=g=>{this.stream=g.streams[0];const e=this.stream.id;"default"!==e&&(this.e2ee&&this.e2ee.setupReceiverTransform(g.receiver),this.callbacks.track(g),this.stream.onremovetrack=g=>{if(this.callbacks.removetrack(g),g.target){const e=this.remoteConnectionIds.indexOf(g.target.id);-1<e&&(delete this.remoteConnectionIds[e],g.stream=g.target,this.callbacks.removestream(g))}},-1<this.remoteConnectionIds.indexOf(e)||(g.stream=this.stream,this.remoteConnectionIds.push(e),this.callbacks.addstream(g)))}),await this.setRemoteDescription(e),await this.createAnswer(e),this.sendAnswer(),await this.onIceCandidate(),await this.waitChangeConnectionStateConnected(),this.stream||new MediaStream}async multiStream(){await this.disconnect(),this.setupE2EE();const g=await this.createOffer(),e=await this.signaling(g);return this.startE2EE(),await this.connectPeerConnection(e),this.pc&&(this.pc.ontrack=g=>{const e=g.streams[0];"default"!==e.id&&e.id!==this.connectionId&&(this.e2ee&&this.e2ee.setupReceiverTransform(g.receiver),this.callbacks.track(g),e.onremovetrack=g=>{if(this.callbacks.removetrack(g),g.target){const e=this.remoteConnectionIds.indexOf(g.target.id);-1<e&&(delete this.remoteConnectionIds[e],g.stream=g.target,this.callbacks.removestream(g))}},-1<this.remoteConnectionIds.indexOf(e.id)||(g.stream=e,this.remoteConnectionIds.push(e.id),this.callbacks.addstream(g)))}),await this.setRemoteDescription(e),await this.createAnswer(e),this.sendAnswer(),await this.onIceCandidate(),void(await this.waitChangeConnectionStateConnected())}}class c{constructor(g,e=!1){this.signalingUrl=g,this.debug=e}publisher(g,e=null,I={audio:!0,video:!0}){return console.warn("@deprecated publisher will be removed in a future version. Use sendrecv or sendonly."),new n(this.signalingUrl,"upstream",g,e,I,this.debug)}subscriber(g,e=null,I={audio:!0,video:!0}){return console.warn("@deprecated subscriber will be removed in a future version. Use recvonly."),new A(this.signalingUrl,"downstream",g,e,I,this.debug)}sendrecv(g,e=null,I={audio:!0,video:!0}){return new n(this.signalingUrl,"sendrecv",g,e,I,this.debug)}sendonly(g,e=null,I={audio:!0,video:!0}){return new n(this.signalingUrl,"sendonly",g,e,I,this.debug)}recvonly(g,e=null,I={audio:!0,video:!0}){return new A(this.signalingUrl,"recvonly",g,e,I,this.debug)}}return{connection:function(g,e=!1){return new c(g,e)},version:function(){return"2020.5.0-canary.0-dev"}}});
//# sourceMappingURL=sora.min.js.map
