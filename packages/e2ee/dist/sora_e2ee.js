/**
 * @sora/e2ee
 * undefined
 * @version: 2020.5.0-canary.0-dev
 * @author: Shiguredo Inc.
 * @license: Apache-2.0
 **/

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.SoraE2EE = factory());
}(this, (function () { 'use strict';

  class SoraE2EE {
      constructor() {
          // 対応しているかどうかの判断
          // @ts-ignore トライアル段階の API なので無視する
          const supportsInsertableStreams = !!RTCRtpSender.prototype.createEncodedStreams;
          if (!supportsInsertableStreams) {
              throw new Error("E2EE is not supported in this browser.");
          }
          this.worker = null;
          this.onWorkerDisconnect = null;
      }
      // worker を起動する
      startWorker() {
          // ワーカーを起動する
          const workerScript = atob("");
          this.worker = new Worker(URL.createObjectURL(new Blob([workerScript], { type: "application/javascript" })));
          this.worker.onmessage = (event) => {
              const { operation } = event.data;
              if (operation === "disconnect" && typeof this.onWorkerDisconnect === "function") {
                  this.onWorkerDisconnect();
              }
          };
      }
      // worker の掃除をする
      clearWorker() {
          if (this.worker) {
              this.worker.postMessage({
                  type: "clear",
              });
          }
      }
      // worker を終了する
      terminateWorker() {
          if (this.worker) {
              this.worker.terminate();
          }
      }
      // 初期化処理
      async init() {
          if (!window.Go) {
              throw new Error(`Failed to load module Go. window.Go is ${window.Go}.`);
          }
          const go = new Go();
          const { instance } = await WebAssembly.instantiateStreaming(fetch("wasm.wasm"), go.importObject);
          go.run(instance);
          if (!window.e2ee) {
              throw new Error(`Failed to load module e2ee. window.e2ee is ${window.e2ee}.`);
          }
          const { preKeyBundle } = await window.e2ee.init();
          return preKeyBundle;
      }
      setupSenderTransform(sender) {
          if (!sender.track)
              return;
          // @ts-ignore トライアル段階の API なので無視する
          const senderStreams = sender.createEncodedStreams();
          const readableStream = senderStreams.readableStream || senderStreams.readable;
          const writableStream = senderStreams.writableStream || senderStreams.writable;
          if (!this.worker) {
              throw new Error("Worker is null. Call startWorker in advance.");
          }
          const message = {
              type: "encrypt",
              readableStream: readableStream,
              writableStream: writableStream,
          };
          this.worker.postMessage(message, [readableStream, writableStream]);
      }
      setupReceiverTransform(receiver) {
          // @ts-ignore トライアル段階の API なので無視する
          const receiverStreams = receiver.createEncodedStreams();
          const readableStream = receiverStreams.readableStream || receiverStreams.readable;
          const writableStream = receiverStreams.writableStream || receiverStreams.writable;
          if (!this.worker) {
              throw new Error("Worker is null. Call startWorker in advance.");
          }
          const message = {
              type: "decrypt",
              readableStream: readableStream,
              writableStream: writableStream,
          };
          this.worker.postMessage(message, [readableStream, writableStream]);
      }
      postRemoteSecretKeyMaterials(result) {
          if (!this.worker) {
              throw new Error("Worker is null. Call startWorker in advance.");
          }
          this.worker.postMessage({
              type: "remoteSecretKeyMaterials",
              remoteSecretKeyMaterials: result.remoteSecretKeyMaterials,
          });
      }
      postSelfSecretKeyMaterial(selfConnectionId, selfKeyId, selfSecretKeyMaterial, waitingTime) {
          if (!this.worker) {
              throw new Error("Worker is null. Call startWorker in advance.");
          }
          this.worker.postMessage({
              type: "selfSecretKeyMaterial",
              selfConnectionId: selfConnectionId,
              selfKeyId: selfKeyId,
              selfSecretKeyMaterial: selfSecretKeyMaterial,
              waitingTime: waitingTime,
          });
      }
      startSession(connectionId, preKeyBundle) {
          const [result, err] = window.e2ee.startSession(connectionId, preKeyBundle.identityKey, preKeyBundle.signedPreKey, preKeyBundle.preKeySignature);
          if (err) {
              throw err;
          }
          return result;
      }
      stopSession(connectionId) {
          const [result, err] = window.e2ee.stopSession(connectionId);
          if (err) {
              throw err;
          }
          return result;
      }
      receiveMessage(message) {
          const [result, err] = window.e2ee.receiveMessage(message);
          if (err) {
              throw err;
          }
          return result;
      }
      start(selfConnectionId) {
          const [result, err] = window.e2ee.start(selfConnectionId);
          if (err) {
              throw err;
          }
          return result;
      }
      addPreKeyBundle(connectionId, preKeyBundle) {
          const err = window.e2ee.addPreKeyBundle(connectionId, preKeyBundle.identityKey, preKeyBundle.signedPreKey, preKeyBundle.preKeySignature);
          if (err) {
              throw err;
          }
      }
      selfFingerprint() {
          return window.e2ee.selfFingerprint();
      }
      remoteFingerprints() {
          return window.e2ee.remoteFingerprints();
      }
      static version() {
          // @ts-ignore
          return '2020.5.0-canary.0-dev';
      }
      static wasmVersion() {
          return window.e2ee.version();
      }
  }

  return SoraE2EE;

})));
